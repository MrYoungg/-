## 一、二分法查找

[ 二分查找：力扣题目链接](https://leetcode.cn/problems/binary-search/description/)

### 1、概述

​    背景：在有序数组中，寻找目标值；

​    思想：通过判断数组中间值是否和目标值相等，更新搜索区间，直到找到目标值或搜索结束；

​    时间复杂度：O(log n)；

​    空间复杂度：O(1)；

### 2、注意点

1. 右区间初始值是 **nums.size()** 还是 **nums.size()-1** ？
2. while循环的判断条件是**left<right** 还是 **left<=right** ？
3. 区间边界更新值left（right）=**middle** 还是**middle+1（middle-1）**？

### 3、决定因素——自定义的区间特性

#### （1）左闭右闭

​	① 右区间初始值为nums.size()-1；

​	② left<=right为合法区间，以此为循环判断条件；

​	③ 因为区间包含边界值，更新边界时left=middle+1，right=middle-1；

#### （2）左闭右开

​	① 右区间初始值为nums.size()；

​	② left<=right为不合法区间，应以left<right为循环判断条件；

​	③ 因为左区间包含边界值，更新边界时left=middle+1；

​	④ 但右区间不包含边界值，更新边界时right=middle；

### 4、代码

```c++
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int left=0,right=nums.size()-1;//左闭右闭写法
        while(left<=right){
            int middle=(left+right)/2;
            if(target>nums[middle]){
                left=middle+1;
            }
            else if(target<nums[middle]){
                right=middle-1;
            }
            else{
                return middle;
            }
        }
       return -1;
    }
};
```
